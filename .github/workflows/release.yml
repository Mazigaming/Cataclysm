name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ env.VERSION }}
    steps:
      - name: Get version from tag
        id: tag_name
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

  build-release:
    name: Build Release (${{ matrix.build }})
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: rust_file_explorer
            asset_name: rust_file_explorer-${{ needs.create-release.outputs.version }}-linux-x64
          
          - build: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: rust_file_explorer.exe
            asset_name: rust_file_explorer-${{ needs.create-release.outputs.version }}-windows-x64.exe
          
          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin
            artifact: rust_file_explorer
            asset_name: rust_file_explorer-${{ needs.create-release.outputs.version }}-macos-x64
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - uses: Swatinem/rust-cache@v2
      
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Strip binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact }}
      
      - name: Create SHA256 checksum
        if: runner.os != 'Windows'
        run: |
          cd target/${{ matrix.target }}/release
          sha256sum ${{ matrix.artifact }} > ${{ matrix.artifact }}.sha256
      
      - name: Create SHA256 checksum (Windows)
        if: runner.os == 'Windows'
        run: |
          cd target/${{ matrix.target }}/release
          certUtil -hashfile ${{ matrix.artifact }} SHA256 > ${{ matrix.artifact }}.sha256
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/${{ matrix.artifact }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
      
      - name: Upload Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/${{ matrix.artifact }}.sha256
          asset_name: ${{ matrix.asset_name }}.sha256
          asset_content_type: text/plain